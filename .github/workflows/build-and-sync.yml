name: Generate ODC + Sync to SharePoint

on:
  push:
    branches: [main]
    paths:
      - 'src/generate.py'
      - 'src/odc_writer.py'

  workflow_dispatch:

jobs:
  generate-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run generator
        run: |
          python -m src.generate

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Authenticate with SharePoint
        id: auth
        env:
          SHAREPOINT_CLIENT_ID: ${{ secrets.SHAREPOINT_CLIENT_ID }}
          SHAREPOINT_CLIENT_SECRET: ${{ secrets.SHAREPOINT_CLIENT_SECRET }}
          SHAREPOINT_TENANT_ID: ${{ secrets.SHAREPOINT_TENANT_ID }}
        run: |
          if [ -z "$SHAREPOINT_CLIENT_ID" ] || [ -z "$SHAREPOINT_CLIENT_SECRET" ] || [ -z "$SHAREPOINT_TENANT_ID" ]; then
            echo "‚ùå One or more SharePoint secrets are missing. Aborting."
            exit 1
          fi

          echo "üîê Requesting access token from Microsoft Graph..."
          TOKEN_RESPONSE=$(curl -s -X POST \
            -d "grant_type=client_credentials" \
            -d "client_id=${SHAREPOINT_CLIENT_ID}" \
            -d "client_secret=${SHAREPOINT_CLIENT_SECRET}" \
            -d "scope=https://graph.microsoft.com/.default" \
            "https://login.microsoftonline.com/${SHAREPOINT_TENANT_ID}/oauth2/v2.0/token")

          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
          ERROR_MESSAGE=$(echo "$TOKEN_RESPONSE" | jq -r '.error.message')

          if [ "$ACCESS_TOKEN" == "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "‚ùå Failed to retrieve access token."
            echo "Error message: $ERROR_MESSAGE"
            echo "Full token response:"
            echo "$TOKEN_RESPONSE"
            exit 1
          fi

          echo "‚úÖ Access token acquired."
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Delete old SharePoint folder
        run: |
          ACCESS_TOKEN="${{ steps.auth.outputs.access_token }}"
          DRIVE_ID="b!34PQK-JF0EmH57ieExSqveCp2B5j30NMsNTGcMEXae_5x8SnfJhdR6JqUh5dD03F"
          FOLDER_PATH="General/Excel-Qualer-SDK"

          # Check if the drive ID is valid
          DRIVE_RESPONSE=$(curl -s -o drive_response.json -w "%{http_code}" -X GET \
            "https://graph.microsoft.com/v1.0/drives/$DRIVE_ID" \
            -H "Authorization: Bearer $ACCESS_TOKEN")

          if [ "$DRIVE_RESPONSE" -ne 200 ]; then
            echo "‚ùå Invalid drive ID. HTTP status: $DRIVE_RESPONSE"
            echo "Response body:"
            cat drive_response.json
            exit 1
          fi

          # Check if folder exists
          CHECK_RESPONSE=$(curl -s -o check_response.json -w "%{http_code}" -X GET \
            "https://graph.microsoft.com/v1.0/drives/$DRIVE_ID/root:/$FOLDER_PATH" \
            -H "Authorization: Bearer $ACCESS_TOKEN")

          if [ "$CHECK_RESPONSE" -ne 200 ]; then
            echo "‚ö†Ô∏è Folder doesn't exist. Skipping delete operation."
            exit 0
          fi

          # Proceed to delete folder
          DELETE_RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X DELETE \
            "https://graph.microsoft.com/v1.0/drives/$DRIVE_ID/root:/$FOLDER_PATH" \
            -H "Authorization: Bearer $ACCESS_TOKEN")

          if [ "$DELETE_RESPONSE" -ne 204 ]; then
            echo "‚ùå Failed to delete folder. HTTP status: $DELETE_RESPONSE"
            echo "Response body:"
            cat response.json
            exit 1
          fi

          echo "‚úÖ Folder deleted successfully."

      - name: Upload new Excel-Qualer-SDK
        run: |
          set -euo pipefail
      
          ACCESS_TOKEN="${{ steps.auth.outputs.access_token }}"
          DRIVE_ID="b!34PQK-JF0EmH57ieExSqveCp2B5j30NMsNTGcMEXae_5x8SnfJhdR6JqUh5dD03F"
          LOCAL_DIR="Excel-Qualer-SDK"
          REMOTE_DIR="General/Excel-Qualer-SDK"
      
          failed=0
      
          encode_path_segments() {
            local input="$1"
            local result=""
            IFS='/' read -ra parts <<< "$input"
            for part in "${parts[@]}"; do
              encoded=$(printf '%s' "$part" | jq -sRr @uri)
              result="$result/$encoded"
            done
            echo "${result#/}"
          }
      
          upload_file() {
            local FILE="$1"
            RELATIVE_PATH="${FILE#$LOCAL_DIR/}"
            DIRNAME=$(dirname "$RELATIVE_PATH")
            BASENAME=$(basename "$RELATIVE_PATH")
            ENCODED_FILE=$(encode_path_segments "$BASENAME")
            FOLDER_PATH="$REMOTE_DIR/$DIRNAME"
            ENCODED_FOLDER_PATH=$(encode_path_segments "$FOLDER_PATH")
      
            FOLDER_CREATE_STATUS=$(curl -s -o folder_create.json -w "%{http_code}" -X PUT \
              "https://graph.microsoft.com/v1.0/drives/$DRIVE_ID/root:/$ENCODED_FOLDER_PATH" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              --data-raw '{ "folder": {}, "@microsoft.graph.conflictBehavior": "replace" }')
      
            if [ "$FOLDER_CREATE_STATUS" -ne 201 ] && [ "$FOLDER_CREATE_STATUS" -ne 200 ]; then
              echo "‚ùå Failed to create folder $REMOTE_DIR/$DIRNAME. HTTP $FOLDER_CREATE_STATUS"
              cat folder_create.json
              exit 1
            fi
      
            FULL_PATH="$REMOTE_DIR/$RELATIVE_PATH"
            ENCODED_PATH=$(encode_path_segments "$FULL_PATH")
            TARGET_URL="https://graph.microsoft.com/v1.0/drives/$DRIVE_ID/root:/$ENCODED_PATH:/content"
      
            echo "‚¨ÜÔ∏è  Uploading $FILE ‚Üí $TARGET_URL"
            UPLOAD_STATUS=$(curl -s -o upload_response.json -w "%{http_code}" -X PUT "$TARGET_URL" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$FILE")
      
            if [ "$UPLOAD_STATUS" -ne 201 ] && [ "$UPLOAD_STATUS" -ne 200 ]; then
              echo "‚ùå Upload failed for $FILE ‚Äî HTTP $UPLOAD_STATUS"
              cat upload_response.json
              failed=1
            else
              echo "‚úÖ Uploaded $FILE"
            fi
          }
      
          export -f encode_path_segments
          export -f upload_file
          export DRIVE_ID ACCESS_TOKEN LOCAL_DIR REMOTE_DIR
          find "$LOCAL_DIR" -type f -print0 | xargs -0 -n1 bash -c 'upload_file "$0"'
      
          if [ "$failed" -ne 0 ]; then
            echo "‚ùå One or more uploads failed. Exiting with error."
            exit 1
          fi